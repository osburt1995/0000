[{
	"version": 2,
	"name": "Azure TTS",
	"pluginId": "com.microsoft.azure",
	"author": "TTS Server",
	"code": "// 注意⚠️ 音高正常值在50\n\n//  密钥\nlet key = 'key key key'\n\n//  区域\nlet region = 'eastus'\n\n// 音频格式 ( https://learn.microsoft.com/zh-cn/azure/cognitive-services/speech-service/rest-text-to-speech?tabs=streaming#audio-outputs )\nlet format = 'audio-24khz-48kbitrate-mono-mp3'\n\nlet PluginJS = {\n    \"name\": \"Azure TTS\",\n    \"id\": \"com.microsoft.azure\", //插件的唯一ID 建议以此种方式命名\n    \"author\": \"TTS Server\",\n    \"description\": \"插件描述\",\n    \"version\": 1, // 插件版本号\n\n    // 获取音频\n    // text: 文本，locale：地区代码，voice：声音key，rate：语速，volume：音量，pitch：音高。(后三者范围都在100内, 当随系统时在200内)\n    \"getAudio\": function(text, locale, voice, rate, volume, pitch){\n        // 日志： 错误 logger.e(), 警告 logger.w(), 信息 logger.i()\n        // 输出某对象所有属性/方法:  for (v in 某对象) logger.i(v)\n        // ttsrv为实用方法的包装对象，如\n        // let resp =  ttsrv.httpGet('https://xx.com/xx.mp3', {\"Content-Type\", \"jsonxxx\"})\n        // resp.body().bytes() 获取字节数组, 使用ttsrv.bytesToStr() 转为String\n\n        // 更多方法见项目文件夹：java/com/github/jing332/tts_server_android/help/plugin/ext\n        \n        rate = rate - 50\n        pitch = pitch - 50\n        \n        \n        let url = 'https://'+ region +'.tts.speech.microsoft.com/cognitiveservices/v1'\n        let headers = {\n            'Content-Type':'application/ssml+xml',\n            'X-Microsoft-OutputFormat': format,\n            'Ocp-Apim-Subscription-Key': key,\n        }\n        let ssml = '<speak xmlns=\"http://www.w3.org/2001/10/synthesis\" xmlns:mstts=\"http://www.w3.org/2001/mstts\" xmlns:emo=\"http://www.w3.org/2009/10/emotionml\" version=\"1.0\" xml:lang=\"zh-CN\">'\n            + '    <voice name=\"'+ voice+ '\">'\n            + '<mstts:express-as style=\"general\" styledegree=\"1.0\" role=\"default\">'\n            + '<prosody rate=\"'+ rate +'%\" pitch=\"'+ pitch + '%\" volume=\"'+ volume +'\">'+ text +'</prosody >'\n            + '</mstts:express-as></voice ></speak >'\n        let resp = ttsrv.httpPost(url, ssml, headers)\n        if  (resp.code() != 200) {\n            throw \"错误，HTTP状态码: \" + resp.code()\n        }\n        \n        return resp.body().bytes()\n    },\n}\n\n// 全部voice数据\nvar voices = {}\n// 当前语言下的voice\nvar currentVoices ={}\n\nlet EditorJS = {\n    //音频的采样率 编辑TTS界面保存时调用\n    \"getAudioSampleRate\": function(locale, voice) {\n        // 根据voice判断返回的采样率\n        // 也可以动态获取：\n        let audio = PluginJS.getAudio('test测试', locale, voice, 50, 50, 1)\n        return ttsrv.getAudioSampleRate(audio)\n    },\n\n    \"getLocales\": function() {\n        let locales = new  Array()\n        \n        voices.forEach(function(v){\n            let loc = v[\"Locale\"]\n            if (!locales.includes(loc)){\n                locales.push(loc)\n            }\n        }) \n        \n        return locales\n    },\n\n    // 当语言变更时调用\n    \"getVoices\": function(locale){\n        currentVoices = []\n        voices.forEach(function(v){\n            if (v['Locale'] === locale){\n                currentVoices.push(v)\n            }    \n        }) \n        \n        let mm = {}\n         currentVoices.map(function(v){\n              mm[v['ShortName']]= v['LocalName']\n           })\n        return mm\n    },\n    \n    // 加载本地或网络数据，运行在IO线程。\n    \"onLoadData\": function(){\n        // 获取数据并缓存以便复用\n        var jsonStr = ''\n        if (ttsrv.fileExist('voices.json')){\n            jsonStr = ttsrv.readTxtFile('voices.json')\n        }else{\n            let url  = \"https://eastus.api.speech.microsoft.com/cognitiveservices/voices/list\"\n            let header = {\n                \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36 Edg/107.0.1418.26\",\n                \"X-Ms-Useragent\":\"SpeechStudio/2021.05.001\",\n            \t\"Content-Type\": \"application/json\",\n            \t\"Origin\": \"https://azure.microsoft.com\",\n            \t\"Referer\":\"https://azure.microsoft.com\"\n               }\n             jsonStr = ttsrv.httpGetString(url, header)\n            ttsrv.writeTxtFile('voices.json', jsonStr)\n        }\n       \n       voices = JSON.parse(jsonStr)\n       // 每一个TTS配置的附加数据\n//       ttsrv.extraData = 'qwqwqwqwqwq'\n    },\n    \n    \"onLoadUI\": function(ctx, linerLayout) {\n\n    }\n    \n}"
}]